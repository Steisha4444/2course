#include <iostream>
#include <fstream>

using namespace std;

int max(int a, int b) { return (a > b) ? a : b; }

int min(int a, int b) { return (a < b) ? a : b; }

void place(int W[100][100], int n, int m) {
    int K[100][100], c,  t1 ,  t2 , j, i , temp, temp1;
    cout << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            K[i][j] = 0;
           // cout << " " << t1[i][j];
        }
      //  cout << endl;
    }
    cout << endl;
   /* for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << " " << W[i][j];
        }
        cout << endl;
    }*/

    c = 1;
    t1 = 0;
    t2 = 0;
    if (m >( n - m))
    {
        for (int i = 0; i < n; i++) {
            temp = (c <= m ? c : m);
            for (int j = 0; j < temp; j++) {
                if (j >= t1) {
                    K[j][i] = 1;
                    if (j == 0)
                        K[j][i] =( K[m + i - 1][i - 1]<0?0: K[m + i - 1][i - 1]) + W[j][i];
                    else if (j == i)
                        K[j][i] = (K[j - 1][i - 1]<0?0: K[j - 1][i - 1]) + W[j][i];

                    else
                        K[j][i] = max((K[m + i - j - 1][i - 1]<0? 0: K[m + i - j - 1][i - 1]), (K[j - 1][i - 1]<0?0: K[j - 1][i - 1])) + W[j][i];
                }
            }
            temp = (m + c <= n ? c+m : n);
            for (int j = m; j < temp; j++) {
                if (j >= m + t2) {
                    K[j][i] = 1;
                    if (j == m)
                        K[j][i] = (K[0 + i - 1][i - 1] < 0 ? 0: K[0 + i - 1][i - 1]) + W[j][i];
                    else if (j == m + i)
                        K[j][i] = (K[j - 1][i - 1]<0?0: K[j - 1][i - 1])+ W[j][i];
                    else
                        K[j][i] = max((K[i - (j - m) - 1][i - 1]<0?0: K[i - (j - m) - 1][i - 1]), (K[j - 1][i - 1]<0? 0 : K[j - 1][i - 1])) + W[j][i];
                }
            }
            if (c > min(m, n - m))
                t1 += 1;
            if (c > max(m, n - m))
                t2 += 1;
            c += 1;
        }
    }
    else if (m <( n - m)) {
        for (int i = 0; i < n; i++) {
            temp = (c <= m ? c : m);
            for (int j = 0; j < temp; j++) {
                if (j >= t1) {
                    K[j][i] = 1;
                   
                    if (j == 0)
                       // t1[j][i] = t1[m + i - 1][i - 1] + W[j][i];
                        K[j][i] = (K[m + i - 1][i - 1] < 0 ? 0 : K[m + i - 1][i - 1]) + W[j][i];
                    else if (j == i)
                      //  t1[j][i] = t1[j - 1][i - 1] + W[j][i];
                        K[j][i] = (K[j - 1][i - 1] < 0 ? 0 : K[j - 1][i - 1]) + W[j][i];
                    else
                      //  t1[j][i] = max(t1[m + i - j - 1][i - 1], t1[j - 1][i - 1]) + W[j][i];
                       K[j][i] = max((K[m + i - j - 1][i - 1]<0? 0 : K[m + i - j - 1][i - 1]),( K[j - 1][i - 1]<0 ? 0 : K[j - 1][i - 1])) + W[j][i];

                }
            }

            
            temp = (m + c <= n ? c+m : n);
            for (int j = m; j < temp; j++) {

                if (j >= m + t2) {
                    K[j][i] = 1;
                    if (j == m)
                        K[j][i] = (K[0 + i - 1][i - 1]<0? 0 : K[0 + i - 1][i - 1])+ W[j][i];
                    else if (j == m + i)
                        K[j][i] =( K[j - 1][i - 1]<0 ? 0 : K[j - 1][i - 1]) + W[j][i];
                    else
                        K[j][i] = max((K[i - (j - m) - 1][i - 1]<0 ? 0 : K[i - (j - m) - 1][i - 1]),( K[j - 1][i - 1]< 0 ? 0 : K[j - 1][i - 1])) + W[j][i];
                }
            }
            if (c > max(m, n - m))
                t1 += 1;
            if (c > min(m, n - m))
                t2 += 1;
            c += 1;
        }
    }
    else {
        
        for (int i = 0; i < n; i++) {
            temp = (c <= m ? c : m);
            for (int j = 0; j < temp; j++)
                if (j >= t1) {
                    K[j][i] = 1;
                    if (j == 0)
                        K[j][i] = (K[m + i - 1][i - 1] < 0 ? 0 : K[m + i - 1][i - 1]) + W[j][i];
                    else if (j == i)
                        K[j][i] = (K[j - 1][i - 1] < 0 ? 0 : K[j - 1][i - 1]) + W[j][i];
                    else
                        K[j][i] = max((K[m + i - j - 1][i - 1] < 0 ? 0 : K[m + i - j - 1][i - 1]), (K[j - 1][i - 1] < 0 ? 0: K[j - 1][i - 1])) + W[j][i];
                }
            temp = (m + c <= n ? c+m : n);
            for (int j = m; j < temp; j++) {
                if (j >= m + t2) {
                    K[j][i] = 1;
                    if (j == m)
                        K[j][i] =( K[0 + i - 1][i - 1]<0?0: K[0 + i - 1][i - 1]) + W[j][i];
                    else if (j == m + i)
                        K[j][i] = (K[j - 1][i - 1] < 0 ? 0 : K[j - 1][i - 1])+ W[j][i];
                    else
                        K[j][i] = max((K[i - (j - m) - 1][i - 1]<0?0: K[i - (j - m) - 1][i - 1]), (K[j - 1][i - 1]<0?0: K[j - 1][i - 1])) + W[j][i];
                }
            }
                if (c > max(m, n - m)) {
                    t1 += 1;
                    t2 += 1;
                }
                c += 1;
            
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << " " << K[i][j];
        }
        cout << endl;
    }
  cout << "Money = "<< max(K[m-1][n-1],K[n-1][n-1]) << endl;
   
  /*  for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << " " << K[i][j];
        }
        cout << endl;
    }*/
}

int main()
{
    ifstream f_in;
    f_in.open("test1.txt");
    int n, m, count, j, i, z;
    int a[100][100], b[100][100], c[100][100];
    f_in >> n;
    f_in >> m;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            f_in >> a[i][j];
    cout << "n:" << n << " " << "m:" << m << endl;
    cout << "a:" << endl;
     for (int i = 0; i < n; i++) {
         for (int j = 0; j < n; j++){
             cout << " " << a[i][j];
     }
         cout << endl;
 }
    cout << endl;
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
        {
            b[i][j] = 0;
            c[i][j] = 0;
        }
    place(a, n, m);
   // int max = -1, temp;



    return 0;
}
